#include "imports/stdlib.fc";

;; NFT Collection contract for minting NFTs
;; Based on TEP-62 standard

(slice, int, cell, cell, cell) load_data() inline {
    slice ds = get_data().begin_parse();
    return 
        (ds~load_msg_addr(), ;; owner_address
         ds~load_uint(64),   ;; next_item_index  
         ds~load_ref(),      ;; content
         ds~load_ref(),      ;; nft_item_code
         ds~load_ref());     ;; royalty_params
}

() save_data(slice owner_address, int next_item_index, cell content, cell nft_item_code, cell royalty_params) impure inline {
    set_data(begin_cell()
        .store_slice(owner_address)
        .store_uint(next_item_index, 64)
        .store_ref(content)
        .store_ref(nft_item_code)
        .store_ref(royalty_params)
        .end_cell());
}

cell calculate_nft_item_state_init(int item_index, cell nft_item_code) {
    cell data = begin_cell()
        .store_uint(item_index, 64)
        .store_slice(my_address())
        .end_cell();
    return begin_cell().store_uint(0, 2).store_dict(nft_item_code).store_dict(data).store_uint(0, 1).end_cell();
}

slice calculate_nft_item_address(int wc, cell state_init) {
    return begin_cell().store_uint(4, 3)
                     .store_int(wc, 8)
                     .store_uint(cell_hash(state_init), 256)
                     .end_cell()
                     .begin_parse();
}

() deploy_nft_item(int item_index, cell nft_item_code, int amount, cell nft_content) impure {
    cell state_init = calculate_nft_item_state_init(item_index, nft_item_code);
    slice nft_address = calculate_nft_item_address(workchain(), state_init);
    var msg = begin_cell()
            .store_uint(0x18, 6)
            .store_slice(nft_address)
            .store_coins(amount)
            .store_uint(4 + 2 + 1, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 1)
            .store_ref(state_init)
            .store_ref(nft_content);
    send_raw_message(msg.end_cell(), 1);
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) {
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if (flags & 1) {
        return ();
    }
    
    slice sender_address = cs~load_msg_addr();
    
    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    var (owner_address, next_item_index, content, nft_item_code, royalty_params) = load_data();

    if (op == 1) { ;; mint_nft
        throw_unless(401, equal_slices(sender_address, owner_address));
        int item_index = in_msg_body~load_uint(64);
        throw_unless(402, item_index <= next_item_index);
        
        var is_last = item_index == next_item_index;
        if (is_last) {
            next_item_index += 1;
            save_data(owner_address, next_item_index, content, nft_item_code, royalty_params);
        }
        
        int amount = in_msg_body~load_coins();
        cell nft_content = in_msg_body~load_ref();
        
        deploy_nft_item(item_index, nft_item_code, amount, nft_content);
        return ();
    }

    if (op == 2) { ;; batch_mint
        throw_unless(401, equal_slices(sender_address, owner_address));
        
        cell deploy_list = in_msg_body~load_ref();
        
        do {
            var (item, f?) = deploy_list~udict_delete_get_min(64);
            if (f?) {
                (int item_index, slice item_slice) = (item~load_uint(64), item);
                int amount = item_slice~load_coins();
                cell nft_content = item_slice~load_ref();
                
                deploy_nft_item(item_index, nft_item_code, amount, nft_content);
                
                if (item_index >= next_item_index) {
                    next_item_index = item_index + 1;
                }
            }
        } until (~ f?);
        
        save_data(owner_address, next_item_index, content, nft_item_code, royalty_params);
        return ();
    }

    if (op == 3) { ;; change_owner
        throw_unless(401, equal_slices(sender_address, owner_address));
        slice new_owner = in_msg_body~load_msg_addr();
        save_data(new_owner, next_item_index, content, nft_item_code, royalty_params);
        return ();
    }

    throw(0xffff);
}

;; Get methods

(int, cell, slice) get_collection_data() method_id {
    var (owner_address, next_item_index, content, _, _) = load_data();
    slice cs = content.begin_parse();
    return (next_item_index, cs~load_ref(), owner_address);
}

slice get_nft_address_by_index(int index) method_id {
    var (_, _, _, nft_item_code, _) = load_data();
    cell state_init = calculate_nft_item_state_init(index, nft_item_code);
    return calculate_nft_item_address(workchain(), state_init);
}

cell get_nft_content(int index, cell individual_nft_content) method_id {
    var (_, _, content, _, _) = load_data();
    slice cs = content.begin_parse();
    cs~load_ref();
    slice common_content = cs~load_ref().begin_parse();
    return (begin_cell()
                      .store_uint(1, 8) ;; offchain tag
                      .store_slice(common_content)
                      .store_ref(individual_nft_content)
           .end_cell());
}