#include "imports/stdlib.fc";

;; Storage layout:
;; storage#_ init:Bool index:uint64 collection_address:MsgAddress owner_address:MsgAddress content:^Cell = Storage;

(int, int, slice, slice, cell) load_data() {
    slice ds = get_data().begin_parse();
    var (init?, index, collection_address) = (ds~load_int(1), ds~load_uint(64), ds~load_msg_addr());
    if (init?) {
        return (-1, index, collection_address, ds~load_msg_addr(), ds~load_ref());
    } else {
        return (0, index, collection_address, null(), null());
    }
}

() store_data(int index, slice collection_address, slice owner_address, cell content) impure {
    set_data(
        begin_cell()
            .store_int(-1, 1)
            .store_uint(index, 64)
            .store_slice(collection_address)
            .store_slice(owner_address)
            .store_ref(content)
        .end_cell()
    );
}

() send_msg(slice to_address, int amount, int op, int query_id, builder payload, int send_mode) impure inline {
    var msg = begin_cell()
        .store_uint(0x10, 6)
        .store_slice(to_address)
        .store_coins(amount)
        .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1);

    if (payload.builder_null?() != -1) {
        msg = msg.store_uint(0, 32).store_uint(op, 32).store_uint(query_id, 64);
        msg = msg.store_builder(payload);
    }

    send_raw_message(msg.end_cell(), send_mode);
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) {
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);

    if (flags & 1) {
        return ();
    }

    slice sender_address = cs~load_msg_addr();
    cs~load_msg_addr(); ;; skip dst
    cs~load_coins(); ;; skip value
    cs~skip_bits(1); ;; skip extracurrency collection
    cs~load_coins(); ;; skip ihr_fee
    int fwd_fee = muldiv(cs~load_coins(), 3, 2);

    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    var (init?, index, collection_address, owner_address, content) = load_data();

    if (~ init?) {
        throw_unless(405, equal_slices(collection_address, sender_address));

        slice new_owner_address = in_msg_body~load_msg_addr();
        cell new_content = in_msg_body~load_ref();

        store_data(index, collection_address, new_owner_address, new_content);
        return ();
    }

    if (op == 0x05138d91) { ;; get_static_data
        send_msg(sender_address, 0, 0x8b771735, query_id, 
            begin_cell().store_uint(index, 256).store_slice(collection_address), 64);
        return ();
    }

    if (op == 1) { ;; transfer
        throw_unless(401, equal_slices(sender_address, owner_address));

        slice new_owner_address = in_msg_body~load_msg_addr();
        force_chain(new_owner_address);
        slice response_destination = in_msg_body~load_msg_addr();
        in_msg_body~load_int(1); ;; skip custom_payload
        int forward_amount = in_msg_body~load_coins();
        int rest_amount = my_balance - min_tons_for_storage();
        if (forward_amount) {
            rest_amount -= (forward_amount + fwd_fee);
        }
        int need_response = response_destination.preload_uint(2) != 0;
        if (need_response) {
            rest_amount -= fwd_fee;
        }

        throw_unless(402, rest_amount >= 0);

        if (forward_amount) {
            send_msg(new_owner_address, forward_amount, 0x05138d91, query_id, 
                begin_cell()
                    .store_slice(owner_address)
                    .store_slice(in_msg_body), 1);
        }

        if (need_response) {
            send_msg(response_destination, rest_amount, 0xd53276db, query_id, 
                begin_cell()
                    .store_uint(index, 256)
                    .store_slice(owner_address)
                    .store_slice(new_owner_address), 1);
        }

        store_data(index, collection_address, new_owner_address, content);
        return ();
    }

    throw(0xffff);
}

;; Get methods

(int, int, slice, slice, cell) get_nft_data() method_id {
    var (init?, index, collection_address, owner_address, content) = load_data();
    return (init?, index, collection_address, owner_address, content);
}

int min_tons_for_storage() asm "b{10000000} PUSHINT"; ;; 0.01 TON